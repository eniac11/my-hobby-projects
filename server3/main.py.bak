from tools.htmls import *
from tools.htmls.styles import create_border, border_style, StyleDef

from .character import *
from .htmls1 import Script

from .story import story, internal_links

style_sheet = StyleSheet(body=StyleContainer(styles={
    **add_style_def('body', [
        Style('font-family', 'sans-serif')
    ]),
    **add_style_def('.status_bar > *', [
        Style('margin-left', '5px'),
        Style('margin-right', '5px'),
        Style('height', '100%'),
        # Style('background', 'darkgray'),
        Style('align-items', 'center'),
        Style('display', 'flex'),
        Style('box-sizing', 'border-box'),
        Style('padding', '5px')
    ]),
    **add_style_def('.status_bar *', [
        Style('border', 'none'),
        Style('background', 'none'),
        Style('color', 'white'),
    ]),
    **add_style_def('.status_bar a', [
        Style('padding', '0px'),
        Style('text-decoration', 'none')

    ]),
    **add_style_def('.status_bar a button', [
        Style('height', '100%'),
        Style('width', '100%')

    ], psuedo=add_style_def('hover', [
        Style('opacity', "60%"),
        Style('background', "black")
    ])),
    **add_style_def('#window > div', [
        Style('height', '80%'),
        Style('width', '80%'),
        Style("background", "gray"),
        Style("pointer-events", "auto")
    ])
},
    ids={
        **add_style_def('hover', [
            Style('display', 'none'),
            Style('position', 'absolute'),
            Style('width', '30%'),
            Style('max-height', '20%'),
            Style('background', 'black'),
            Style('color', 'white'),
            Style('padding', '10px'),
            Style('padding-top', '0px'),
            Style('overflow-y', 'auto'),
            *create_border(all=border_style('dotted'))
        ]),
        **add_style_def('window', [
            # Style('width', '30%'),
            # Style('height', "80%"),
            Style('top', "0"),
            Style('left', "0"),
            Style("position", "absolute"),
            # Style("margin", "20%"),
            # Style("background", "lightgray")
            Style("align-items", "center"),
            Style("justify-content", "center"),
            Style('height', '100%'),
            Style('width', '100%'),
            Style("pointer-events", "none")

        ])
    },
    classes={
        **add_style_def('status_bar', [
            Style('bottom', '0'),
            Style('left', '0'),
            Style('position', 'fixed'),
            Style('width', '100%'),
            Style('height', '30px'),
            Style('align-items', 'center'),
            Style('display', 'flex'),

            # Style('padding', '5px')
        ])
    }),
    containers=[
        MediaQuery("(prefers-color-scheme: dark)",
                   styles={
                       **add_style_def('body', [
                           Style('padding', '1em'),
                           Style('margin', '0px'),
                           Style('box-sizing', 'border-box'),
                           Style("background", '#131516'),
                           Style('color', 'white')
                       ]),
                       **add_style_def('html', [
                           Style('padding', '0px'),
                           Style('height', '100%'),
                           Style('margin', '0px')
                       ]),
                       **add_style_def('a', [
                           Style('color', '#3391ff')
                       ]),
                       **add_style_def(".sidepanel .closebtn", [
                           Style("position", "absolute"),
                           Style("top", "0"),
                           Style("right", "25px"),
                           Style("font-size", "36px")
                       ])
                   },
                   ids={
                       **add_style_def('text_help', [
                           Style('padding-left', '10px')
                       ]),

                   },
                   classes={
                       **add_style_def('reference', [
                           Style('color', 'white')
                       ]),
                       **add_style_def('status_bar', [
                           Style('background', 'rgb(73, 79, 82)')
                       ])
                   }),
        MediaQuery("(prefers-color-scheme: light)",
                   classes={
                       **add_style_def('reference', [
                           Style('color', 'black')
                       ])
                   }),
        MediaQuery("print",
                   styles={
                       **add_style_def('nav', [
                           Style('display', 'none')
                       ]),
                       **add_style_def('body > ul', [
                           Style('display', 'none')
                       ])
                   },
                   classes={
                       **add_style_def('reference', [
                           Style('color', 'black')
                       ]),
                       **add_style_def('status_bar', [
                           Style('display', 'none')
                       ])
                   })
    ])
config.style_sheet = style_sheet

scripts = [
    create_script(url="/static/jquery-1.11.0.min.js"),
    create_script(url="/static/hoverintent.js"),
    create_script(url="/static/functions.js"),
    create_script(url="/static/popup.js")
]

html_story = flex_item(create_div(story), grow=1)


def create_help_text():
    items = []
    for category in LoreItem.lore_items.values():
        items.extend(map(lambda x: x.documentation_text(), category))
    return items


def get_word_count():
    text_blocks = html_story.internal_get_representation_blocks(TextBlock)
    # print(text_blocks)
    count = 0
    for text_block in text_blocks:
        text = text_block.elem_
        count += len(text.split())
    return count

def count_stats():
    text_blocks = html_story.internal_get_representation_blocks(TextBlock)
    count = 0
    count_no_spaces = 0
    for text_block in text_blocks:
        text = text_block.elem_
        # print(text)
        count += len(text)
        count_no_spaces += len(text.replace(" ", ""))

    return create_element('ul', children=[
                create_list_item(children=["Word Count: ", get_word_count()]),
                create_list_item(children=["Character Count: ", count]),
                create_list_item(children=["Character Count (no spaces): ", count_no_spaces])
            ])

stats = count_stats()

def status_bar():
    return create_div([
        create_link("/print", create_button("Print")),
        create_element('span', inner="Word Count: " + str(get_word_count()), styles=[Style('margin-left', 'auto')], class_="reference", data=stats.get_id()),
    ], style_def=StyleDef().add_class('status_bar'))





page = Page(
    head=[
        config.style_sheet,
        *scripts
    ],
    body=[
        create_div([
            flex(create_div([
                html_story
            ], styles=[
                Style('height', '100%')
            ]))], id="test"),
        create_div(
            [*create_help_text(),stats],

            styles=[
                Style('display', 'none')
            ]
        ),
        create_div([], id_="hover"),
        count_stats()

    ],
    onload="setupPopupCallbacks()"
)


def display_lore():
    div = create_div([])
    for category in LoreItem.lore_items.keys():
        div.add_child(create_header(category.title()))
        for item in LoreItem.lore_items[category]:
            div.add_child(item.documentation_text())
    return div


def display_category(category):
    return Page(head=[
        config.style_sheet
    ],
        body=[
            create_header(category.title()),
            *[
                create_div([
                    hr(),
                    item.documentation_text()
                ])
                for item in LoreItem.lore_items[category]
            ],
            hr()
        ])


def display_categories():
    return Page(head=[
        config.style_sheet
    ],
        body=[
            create_element("ul", children=[
                *[
                    create_element('li', create_link("?category=" + item, item.title()))
                    for item in LoreItem.lore_items.keys()
                ]
            ])
        ])


objects = Page(body=[
    display_lore()
])
